<!-- ANT v1.6.5 build file Hopefully you will not have to alter this file 
	to make it work on your system. Instead, create a localbuild.properties file 
	from the localbuild.properties.in template. Targets: The default target (build) 
	will compile all classes "deploy" will deploy the application "clean" will 
	remove the classfiles -->
<project name="DataIndexer" default="build" basedir=".">


	<!-- Create the build.properties file from localbuild.properties and set 
		the necessary variables there, try to avoid altering this file -->
   <property file="localbuild.properties" />		
	<property file="build.properties" />

	<!-- The directories containing source code, properties, and webapp files -->

	<property name="src.dir" value="./src" />
	<property name="test.src" location="test/src" />
	<property name="build.test.dir" location="build/tests" />
	<property name="properties" value="./resources" /> 
	<property name="build.dir" value="./build" /> 
	<property name="web.dir" value="./web"/>
   <property name="webapp" value="./webapp"/>
    

	<property name="java.lib" value="./lib" />
	<property name="servlet.jar" value="(set this in localbuild.properties!)" />  

   <path id="compile.classpath">
      <!-- Include all JAR files that will be included in /lib -->
      <fileset dir="lib">
         <include name="**/*.jar" />
      </fileset>
      <pathelement location="${servlet.jar}" />
   </path>

   <path id="run-classpath">
      <fileset dir="lib">
         <include name="*.jar" />
      </fileset>

      <!-- We need the servlet API classes: -->
      <!-- for Tomcat 4.1 use servlet.jar -->
      <!-- for Tomcat 5.0 use servlet-api.jar -->
      <!-- for Other app server - check the docs -->
      <fileset dir="${tomcat.home}/lib">
         <include name="servlet*.jar" />
      </fileset> 
      <pathelement path="${build.dir}/WEB-INF/classes" />
   </path>

   <path id="test-classpath">
      <fileset dir="lib">
         <include name="*.jar" />
      </fileset> 
      <pathelement path="${build.dir}/WEB-INF/classes" />
      <pathelement path="${build.test.dir}" />
   </path>

	<target name="prepare">
      <mkdir dir="${build.dir}" />
      <mkdir dir="${build.dir}/WEB-INF/classes" /> 
   </target>

	<target name="build" depends="compile, lib, resources, web, taglibs"
      description="Compile main source tree java files">
   </target>


	<target name="compile" depends="prepare">
		<javac destdir="${build.dir}/WEB-INF/classes" srcdir="${src.dir}" debug="true"
			deprecation="false" optimize="false" failonerror="true">
			<classpath refid="compile.classpath" />
			<!-- <compilerarg value="${java.opts}" /> -->
		</javac>
	</target> 

	<target name="lib" description="dependency jar files">
		<!-- copy libraries to build dir -->
		<copy todir="${build.dir}/WEB-INF/lib" preservelastmodified="true">
			<flattenmapper />
			<fileset dir="lib/">
				<include name="**/*.jar" />
				<include name="**/*.mar" /> 
			</fileset>
		</copy>
	</target>

	<target name="resources">
      <copy todir="${build.dir}/WEB-INF/classes" preservelastmodified="true">
         <fileset dir="resources">
            <include name="**/*.xml" />
            <include name="**/*.dtd" />
         </fileset>
      </copy>

      <copy todir="${build.dir}/WEB-INF/classes" preservelastmodified="true">
         <fileset dir="resources">
            <include name="*.properties" />
         </fileset>
      </copy>

   </target>
   
   <target name="web">
      <copy todir="${build.dir}" preservelastmodified="true">
         <fileset dir="${web.dir}">
            <include name="**/*.jsp" />
            <include name="**/*.css" />
            <include name="**/*.gif" />
            <include name="**/*.jpg" />
            <include name="**/*.png" />
            <include name="**/*.js" />
         </fileset>
      </copy>

      <copy todir="${build.dir}/WEB-INF" preservelastmodified="true">
         <fileset dir="${webapp}">
            <include name="${app.name}-servlet.xml" />
            <include name="views.xml" />
         </fileset>
      </copy>

   </target>

   <target name="taglibs">
      <!-- copy taglibs to webapp -->
      <copy todir="${build.dir}/WEB-INF/taglibs" preservelastmodified="true">
         <fileset dir="${web.dir}/WEB-INF/taglibs" />
      </copy>
   </target>
   
   <target name="war" depends="build" description="create war file">
       <war destfile="${app.name}.war" webxml="webapp/web.xml">
           <fileset dir="${build.dir}">
               <include name="**/*.*"/>
           </fileset>
      </war>
   </target>

   <target name="deploy" depends="war" description="deploy web app to context">
      <copy todir="${tomcat.home}/webapps" >
         <fileset dir=".">
               <include name="${app.name}.war"/>
         </fileset>
      </copy>
      <copy file="webapp/${app.name}.xml" tofile="${tomcat.home}/conf/Catalina/localhost/${app.name}.xml"/>

   </target>


	<target name="clean">
		<delete dir="${build.dir}" />
		<delete file="${build.dir}/${app.name}.jar" />
	</target>

	<target name="compile.tests" depends="build"
		description="compile the junit test source ">
		<mkdir dir="${build.test.dir}" />
		<!-- Compile the java code from ${test.src} into ${test.build} -->
		<javac srcdir="${test.src}" destdir="${build.test.dir}" debug="${compile.debug}"
			deprecation="false" optimize="false" source="${compile.source}"
			target="${compile.target}">
			<classpath refid="test-classpath" />
		</javac>
		<!-- Copy the test resources to output directory -->
		<copy todir="${build.test.dir}">
			<fileset dir="test/resources" />
		</copy>
		<!-- Copy resources that have been placed in the src directory -->
		<copy todir="${build.test.dir}">
			<fileset dir="${test.src}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	
    
   <target name="CreateBibMarcXmlIndex" depends="build" description="Run CreateBibMarcXmlIndex" >
      <echo message="Running CreateBibMarcXmlIndex"/>
      <java fork="true" dir="${basedir}" classname="edu.cornell.library.integration.app.CreateBibMarcXmlIndex" > 
         <arg value="${davhost}/data/voyager/bib/bib.xml.full" />
         <classpath>
          <path refid="run-classpath"/>
        </classpath>
      </java>
   </target>
   
   <target name="CreateMfhdTriplesIndex" depends="build" description="Run CreateMfhdtripleslIndex" >
      <echo message="Running CreateMfhdTriplesIndex"/>
      <java fork="true" dir="${basedir}" classname="edu.cornell.library.integration.app.CreateMfhdTriplesIndex" > 
         <arg value="${davhost}/data/voyager/mfhd/mfhd.nt.full" />
         <classpath>
          <path refid="run-classpath"/>
        </classpath>
      </java>
   </target>
   
   <target name="CreateBibTriplesIndex" depends="build" description="Run CreateBibtripleslIndex" >
      <echo message="Running CreateBibTriplesIndex"/>
      <java fork="true" dir="${basedir}" classname="edu.cornell.library.integration.app.CreateBibTriplesIndex" > 
         <arg value="${davhost}/data/voyager/bib/bib.nt.full" />
         <classpath>
          <path refid="run-classpath"/>
        </classpath>
      </java>
   </target>
   
   <target name="LoadTriplesIndex" depends="build" description="Run LoadTriplesIndex" >
      <echo message="Running LoadTriplesIndex"/>
      <java fork="true" dir="${basedir}" classname="edu.cornell.library.integration.app.LoadTriplesIndex" > 
         <classpath>
          <path refid="run-classpath"/>
        </classpath>
      </java>
   </target>
   
   <target name="LookupBibId" depends="build" description="Run LookupBibId" >
      <echo message="Running LookupBibId"/>
      <java fork="true" dir="${basedir}" classname="edu.cornell.library.integration.app.LookupBibId" >
         <arg value="3577866" /> 
         <classpath>
          <path refid="run-classpath"/>
        </classpath>
      </java>
   </target>
   
   <target name="LookupTest" depends="build" description="Run LookupTest" >
      <echo message="Running LookupTest"/>
      <java fork="true" dir="${basedir}" classname="edu.cornell.library.integration.app.LookupTest" >
         <arg value="3577866" /> 
         <classpath>
          <path refid="run-classpath"/>
        </classpath>
      </java>
   </target>
 


</project>
