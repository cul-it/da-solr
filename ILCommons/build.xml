<!-- ANT v1.6.5 build file Hopefully you will not have to alter this file 
	to make it work on your system. Instead, create a localbuild.properties file 
	from the localbuild.properties.in template. Targets: The default target (build) 
	will compile all classes "deploy" will deploy the application "clean" will 
	remove the classfiles -->
<project name="ILCommons" default="build" basedir=".">


	<!-- Create the build.properties file from localbuild.properties and set 
		the necessary variables there, try to avoid altering this file -->
	<property file="build.properties" />

	<!-- The directories containing source code, properties, and webapp files -->

	<property name="src.dir" value="./src/main/java" />
	<property name="test.src" location="./src/test/java" />
	<property name="build.test.dir" location="build/tests" />
	<property name="resources" value="./src/main/resources" /> 
	<property name="test.resources" value="./src/test/resources" /> 
	<property name="build.dir" value="./build" /> 
    <property name="dist.dir" value="./dist" />  
    <property name="compile.target" value="1.7" />
 
	<property name="java.lib" value="./lib" />  

   <path id="compile.classpath">
      <!-- Include all JAR files that will be included in /lib -->
      <fileset dir="lib">
         <include name="**/*.jar" />
      </fileset>
       
   </path>

   

   <path id="test-classpath">
      <fileset dir="lib">
         <include name="*.jar" />
      </fileset> 
      <pathelement path="${build.dir}/classes" />
      <pathelement path="${build.test.dir}" />
   </path>

	<target name="prepare">
	   <mkdir dir="${dist.dir}" />
      <mkdir dir="${build.dir}" />
      <mkdir dir="${build.dir}/classes" /> 
   </target>

	<target name="build" depends="compile, lib, resources"
      description="Compile main source tree java files">
   </target>


	<target name="compile" depends="prepare">
		<javac destdir="${build.dir}/classes" srcdir="${src.dir}" debug="true"
			deprecation="false" optimize="false" failonerror="true">
			<classpath refid="compile.classpath" />
			<!-- <compilerarg value="${java.opts}" /> -->
		</javac>
	</target> 

	<target name="lib" description="dependency jar files">
		<!-- copy libraries to build dir -->
		<copy todir="${build.dir}/lib" preservelastmodified="true">
			<flattenmapper />
			<fileset dir="lib/">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="resources">       
      <copy todir="${build.dir}/classes" preservelastmodified="true">
         <fileset dir="${resources}">
            <include name="*.properties" />
         </fileset>
      </copy>
   </target>
   
   
   
   <target name="jar" depends="build" description="create jar file">
      <jar jarfile="${dist.dir}/${app.name}.jar"  basedir="${build.dir}/classes"/>
   </target>

  	<target name="clean">
		<delete dir="${build.dir}" />
		<delete file="${dest.dir}/${app.name}.jar" />
	</target>

	<target name="compile.tests" depends="build"
		description="compile the junit test source ">
		<mkdir dir="${build.test.dir}" />

		<!-- Compile the java code from ${test.src} into ${test.build} -->
		<javac destdir="${build.test.dir}"  srcdir="${test.src}" 
			deprecation="false" optimize="false"  >
			<classpath refid="test-classpath" />
		</javac>

		<!-- Copy the test resources to output directory -->
		<copy todir="${build.test.dir}">
            <fileset dir="${test.resources}">
              <include name="*.properties"/>
            </fileset>
		</copy>

		<!-- Copy resources that have been placed in the src directory -->
		<copy todir="${build.test.dir}">
			<fileset dir="${test.src}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	
    
   
</project>
