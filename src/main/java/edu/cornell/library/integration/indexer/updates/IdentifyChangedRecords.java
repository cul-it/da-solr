package edu.cornell.library.integration.indexer.updates;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import edu.cornell.library.integration.ilcommons.configuration.SolrBuildConfig;
import edu.cornell.library.integration.ilcommons.service.DavService;
import edu.cornell.library.integration.ilcommons.service.DavServiceFactory;
import edu.cornell.library.integration.indexer.utilities.IndexRecordListComparison;
import edu.cornell.library.integration.indexer.utilities.IndexRecordListComparison.ChangedBib;
import edu.cornell.library.integration.utilities.DaSolrUtilities.CurrentDBTable;
import edu.cornell.library.integration.utilities.IndexingUtilities.IndexQueuePriority;

import static edu.cornell.library.integration.utilities.IndexingUtilities.queueBibDelete;
import static edu.cornell.library.integration.utilities.IndexingUtilities.addBibToUpdateQueue;

/**
 * Identify record changes from Voyager. This is done by comparing the
 * list of active BIB, MFHD and item records in Voyager along with their
 * modification dates with the similar lists in the Solr index.<br/><br/>
 *   
 * Bibs should be updated in Solr if any of the following are true:<br/>
 *  1. The set of mfhd records associated with the bib does not match.<br/>
 *  2. The set of item records associated with EACH mfhd does not match.<br/>
 *       (One possible modification involves the reassignment of an item
 *        between two mfhds for the same bib.)<br/>
 *  4. The Voyager modification dates for any single bib, mfhd or item<br/>
 *     record related to a bib is more recent than the dates in Solr.<br/><br/>
 *  
 * The reasons for deleting or adding a bib in Solr should be obvious,
 * though it's worth noting that for both bibs and holdings records, a 
 * suppressed record in Voyager is functionally equivalent to an absent
 * one.<br/><br/>
 * 
 * The lists are generated by comparing lists from step 1 (which is
 * edu.cornell.library.integration.indexer.updates.IdentifyCurrentVoyagerRecords)
 * with the contents of the Solr index. This step doesn't need to run
 * immediately after step 1, but a long delay may result in records
 * available during step 1 being unavailable during indexing, which
 * may cause the post-update index integrity check to report failure.
 */
public class IdentifyChangedRecords {
	
	DavService davService;
	SolrBuildConfig config;
	String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
	Set<Integer> updatedBibs = new HashSet<>();
	private static Timestamp max_date = null;

	final static String maxBibQueryFirstPass = "SELECT max(bib_id), max(record_date) FROM "+CurrentDBTable.BIB_VOY;
	final static String maxBibQueryOther = "SELECT max(bib_id) FROM "+CurrentDBTable.BIB_VOY;
	final static String maxMfhdQuery = "SELECT max(mfhd_id) FROM "+CurrentDBTable.MFHD_VOY;
	final static String maxItemQuery = "SELECT max(item_id) FROM "+CurrentDBTable.ITEM_VOY;
	final static String recentBibQuery =
			"select BIB_ID, UPDATE_DATE, SUPPRESS_IN_OPAC from BIB_MASTER"
					+" where ( BIB_ID > ? or UPDATE_DATE > ?)";
	final static String recentMfhdQuery =
			"select BIB_MFHD.BIB_ID, MFHD_MASTER.MFHD_ID, UPDATE_DATE"
					+"  from BIB_MFHD, MFHD_MASTER"
					+" where BIB_MFHD.MFHD_ID = MFHD_MASTER.MFHD_ID"
					+ "  and SUPPRESS_IN_OPAC = 'N'"
					+ "  and ( MFHD_MASTER.MFHD_ID > ? or UPDATE_DATE > ?)";
	final static String recentItemQuery =
			"select MFHD_ITEM.MFHD_ID, ITEM.ITEM_ID, ITEM.MODIFY_DATE"
		    		+"  from MFHD_ITEM, ITEM"
		    		+" where MFHD_ITEM.ITEM_ID = ITEM.ITEM_ID"
		    		+ "  and ( ITEM.ITEM_ID > ? or MODIFY_DATE > ?)";
	final static String bibVoyQuery =
			"SELECT record_date, active FROM "+CurrentDBTable.BIB_VOY+" WHERE bib_id = ?";
	final static String bibVoyUpdate =
			"UPDATE "+CurrentDBTable.BIB_VOY+" SET record_date = ? , active = ? WHERE bib_id = ?";
	final static String bibVoyInsert =
			"INSERT INTO "+CurrentDBTable.BIB_VOY+" (bib_id,record_date,active) VALUES (?,?,?)";
	final static String mfhdVoyQuery =
			"SELECT bib_id, record_date FROM "+CurrentDBTable.MFHD_VOY+" WHERE mfhd_id = ?";
	final static String mfhdVoyUpdate =
			"UPDATE "+CurrentDBTable.MFHD_VOY+""+ " SET record_date = ?, bib_id = ? WHERE mfhd_id = ?";
	final static String mfhdVoyInsert =
			"INSERT INTO "+CurrentDBTable.MFHD_VOY+" (bib_id, mfhd_id, record_date) VALUES (?, ?, ?)";
	final static String itemVoyQuery =
			"SELECT mfhd_id, record_date FROM "+CurrentDBTable.ITEM_VOY+" WHERE item_id = ?";
	final static String itemVoyUpdate =
			"UPDATE "+CurrentDBTable.ITEM_VOY+" SET record_date = ?, mfhd_id = ? WHERE item_id = ?";
	final static String itemVoyInsert =
			"INSERT INTO "+CurrentDBTable.ITEM_VOY+" (mfhd_id, item_id, record_date) VALUES (?, ?, ?)";

	public static void main(String[] args)  {
		boolean thorough = true;
		if (args.length > 0)
			thorough = Boolean.valueOf(args[0]);

		List<String> requiredArgs = SolrBuildConfig.getRequiredArgsForWebdav();
		requiredArgs.addAll(SolrBuildConfig.getRequiredArgsForDB("Current"));
		if (thorough)
			requiredArgs.addAll(IndexRecordListComparison.requiredArgs());
		else
			requiredArgs.addAll(SolrBuildConfig.getRequiredArgsForDB("Voy"));

		try{        
			new IdentifyChangedRecords( SolrBuildConfig.loadConfig( null, requiredArgs ),thorough);
		}catch( Exception e){
			e.printStackTrace();
			System.exit(1);
		}
	}

	public IdentifyChangedRecords(SolrBuildConfig config, Boolean thorough) throws Exception {
		this.config = config;
		if (thorough) {
			System.out.println("Launching thorough check for Voyager record changes.");
			thoroughIdentifiationOfChanges();
		} else {
			System.out.println("Launching quick check for Voyager record changes.");
			quickIdentificationOfChanges();
		}
	}

	private void quickIdentificationOfChanges() throws Exception {
		updatedBibs.clear();
		try (   Connection current = config.getDatabaseConnection("Current");
				Statement stmtCurrent = current.createStatement() ) {

			Integer max_bib = 0, max_mfhd = 0, max_item = 0;

			if ( max_date == null )
				try ( ResultSet rs = stmtCurrent.executeQuery(maxBibQueryFirstPass) ) {
					while (rs.next()) {
						max_bib = rs.getInt(1);
						max_date = rs.getTimestamp(2);
					}
				}
			else
				try ( ResultSet rs = stmtCurrent.executeQuery(maxBibQueryOther) ) {
					while (rs.next())
						max_bib = rs.getInt(1);
				}
			Timestamp ts = max_date;
			ts.setTime(ts.getTime() - (10/*seconds*/
										* 1000/*millis per second*/));

			try ( ResultSet rs = stmtCurrent.executeQuery( maxMfhdQuery ) ){
				while (rs.next())
					max_mfhd = rs.getInt(1);
			}
			try ( ResultSet rs = stmtCurrent.executeQuery( maxItemQuery ) ){
				while (rs.next())
					max_item = rs.getInt(1);
			}

			try ( Connection voyager = config.getDatabaseConnection("Voy") ){

				try ( PreparedStatement pstmt = voyager.prepareStatement(recentBibQuery) ){
					pstmt.setInt(1, max_bib);
					pstmt.setTimestamp(2, ts);
					try ( ResultSet rs = pstmt.executeQuery() ){
						while (rs.next()) {
							Timestamp thisTS = rs.getTimestamp(2);
							String suppress_in_opac = rs.getString(3);
							int bib_id = rs.getInt(1);
							if (updatedBibs.contains(bib_id))
								continue;
							queueBib( current, bib_id, thisTS, 
									suppress_in_opac != null && suppress_in_opac.equals("N") );
							if (thisTS != null && 0 > thisTS.compareTo(max_date))
								max_date = thisTS;
						}
					}
				}

				int bibCount = updatedBibs.size();
				System.out.println("Queued from poling bib data: "+bibCount);

				try ( PreparedStatement pstmt = voyager.prepareStatement( recentMfhdQuery )){
					pstmt.setInt(1, max_mfhd);
					pstmt.setTimestamp(2, ts);
					try ( ResultSet rs = pstmt.executeQuery() ){
					while (rs.next())
						queueMfhd( current, rs.getInt(1), rs.getInt(2), rs.getTimestamp(3));
					}
				}

				int mfhdCount = updatedBibs.size() - bibCount;
				System.out.println("Queued from poling holdings data: "+mfhdCount);

				try ( PreparedStatement pstmt = voyager.prepareStatement( recentItemQuery )){
					pstmt.setInt(1, max_item);
					pstmt.setTimestamp(2, ts);
					try ( ResultSet rs = pstmt.executeQuery() ){
						while (rs.next())
							queueItem( current, rs.getInt(1), rs.getInt(2), rs.getTimestamp(3));
					}
				}

				int itemCount = updatedBibs.size() - bibCount - mfhdCount;
				System.out.println("Queued from poling item data: "+itemCount);
				System.out.println("Total bibs queued: "+updatedBibs.size());
			}
		}
	}

	private void queueBib(Connection current, int bib_id, Timestamp update_date, Boolean isActive) throws SQLException {
		try ( PreparedStatement bibVoyQStmt = current.prepareStatement( bibVoyQuery ) ) {
			bibVoyQStmt.setInt(1, bib_id);
			try ( ResultSet rs = bibVoyQStmt.executeQuery() ) {
				while (rs.next()) {
					Timestamp old_date = rs.getTimestamp(1);
					Boolean previouslyActive = rs.getBoolean(2);
					if (update_date != null
							&& (old_date == null
							|| 0 > old_date.compareTo(update_date))) {
						// bib is already in current, but has been updated
						try ( PreparedStatement bibVoyUStmt = current.prepareStatement( bibVoyUpdate ) ){
							bibVoyUStmt.setTimestamp(1, update_date);
							bibVoyUStmt.setBoolean(2, isActive);
							bibVoyUStmt.setInt(3, bib_id);
							bibVoyUStmt.executeUpdate();
						}
						if ( ! updatedBibs.contains(bib_id)) {

							if (isActive) {
								updatedBibs.add(bib_id);
								if (previouslyActive) 
									addBibToUpdateQueue(current, bib_id, DataChangeUpdateType.BIB_UPDATE);
								else
									addBibToUpdateQueue(current, bib_id, DataChangeUpdateType.ADD);
							} else {
								if (previouslyActive)
									queueBibDelete( current, bib_id );
								// else - ignore change to suppressed record
							}
							
						}
					} // else bib is unchanged - do nothing
					return;
				}
			}
		}

		// bib is not yet in current db
		try ( PreparedStatement bibVoyIStmt = current.prepareStatement( bibVoyInsert ) ) {
			bibVoyIStmt.setInt(1, bib_id);
			bibVoyIStmt.setTimestamp(2, update_date);
			bibVoyIStmt.setBoolean(3, isActive);
			bibVoyIStmt.executeUpdate();
		}
		if ( isActive && ! updatedBibs.contains(bib_id) ) {
			updatedBibs.add(bib_id);
			addBibToUpdateQueue(current, bib_id, DataChangeUpdateType.ADD);
		}
	}

	private void queueMfhd(Connection current, int bib_id, int mfhd_id,
			Timestamp update_date) throws SQLException {
		if ( ! isBibActive(current,bib_id))
			return;

		try ( PreparedStatement mfhdVoyQStmt = current.prepareStatement(mfhdVoyQuery) ) {
			mfhdVoyQStmt.setInt(1, mfhd_id);
			try ( ResultSet rs = mfhdVoyQStmt.executeQuery() ){
				while (rs.next()) {
					Timestamp old_date = rs.getTimestamp(2);
					if (update_date != null
							&& (old_date == null
							|| 0 > old_date.compareTo(update_date))) {
						// mfhd is already in current, but has been updated
						int old_bib = rs.getInt(1);
						try ( PreparedStatement mfhdVoyUStmt = current.prepareStatement( mfhdVoyUpdate )){
							mfhdVoyUStmt.setTimestamp(1, update_date);
							mfhdVoyUStmt.setInt(2, bib_id);
							mfhdVoyUStmt.setInt(3, mfhd_id);
							mfhdVoyUStmt.executeUpdate();
						}
						if (! updatedBibs.contains(bib_id)) {
							addBibToUpdateQueue(current, bib_id, DataChangeUpdateType.MFHD_UPDATE);
							updatedBibs.add(bib_id);
						}

						if (old_bib != bib_id
								&& ! updatedBibs.contains(old_bib)) {
							addBibToUpdateQueue(current, old_bib, DataChangeUpdateType.MFHD_UPDATE);
							updatedBibs.add(old_bib);
						}
					} // else mfhd is unchanged - do nothing
					return;
				}
			}
		}

		// mfhd is not yet in current db
		try ( PreparedStatement mfhdVoyIStmt = current.prepareStatement( mfhdVoyInsert ) ){
			mfhdVoyIStmt.setInt(1, bib_id);
			mfhdVoyIStmt.setInt(2, mfhd_id);
			mfhdVoyIStmt.setTimestamp(3, update_date);
			mfhdVoyIStmt.executeUpdate();
		}
		if (! updatedBibs.contains(bib_id)) {
			addBibToUpdateQueue(current, bib_id, DataChangeUpdateType.MFHD_UPDATE);
			updatedBibs.add(bib_id);
		}
	}

	private void queueItem(Connection current, int mfhd_id, int item_id,
			Timestamp update_date) throws SQLException {

		try ( PreparedStatement itemVoyQStmt = current.prepareStatement( itemVoyQuery ) ){
			itemVoyQStmt.setInt(1, item_id);
			try ( ResultSet rs = itemVoyQStmt.executeQuery() ){
				while (rs.next()) {
					Timestamp old_date = rs.getTimestamp(2);
					if (update_date != null
							&& (old_date == null
							|| 0 > old_date.compareTo(update_date))) {
						// item is already in current, but has been updated
						int old_mfhd = rs.getInt(1);
						try ( PreparedStatement itemVoyUStmt = current.prepareStatement(itemVoyUpdate) ){
							itemVoyUStmt.setTimestamp(1, update_date);
							itemVoyUStmt.setInt(2, mfhd_id);
							itemVoyUStmt.setInt(3, item_id);
							itemVoyUStmt.executeUpdate();
						}

						int bib_id = getBibIdForMfhd(current, mfhd_id);
						if (bib_id > 0
								&& isBibActive(current,bib_id)
								&& ! updatedBibs.contains(bib_id)) {
							addBibToUpdateQueue(current, bib_id, DataChangeUpdateType.ITEM_UPDATE);
							updatedBibs.add(bib_id);
						}

						if (mfhd_id != old_mfhd) {
							int old_bib_id = getBibIdForMfhd(current, old_mfhd);
							if ( old_bib_id > 0
									&& old_bib_id != bib_id
									&& isBibActive(current,old_bib_id)
									&& ! updatedBibs.contains(old_bib_id)) {
								addBibToUpdateQueue(current, old_bib_id, DataChangeUpdateType.ITEM_UPDATE);
								updatedBibs.add(old_bib_id);
							}
						}
					} // else item is unchanged - do nothing
					return;
				}
			}
		}

		// item is not yet in current db
		try ( PreparedStatement itemVoyIStmt = current.prepareStatement( itemVoyInsert ) ) {
			itemVoyIStmt.setInt(1, mfhd_id);
			itemVoyIStmt.setInt(2, item_id);
			itemVoyIStmt.setTimestamp(3, update_date);
			itemVoyIStmt.executeUpdate();
		}
		int bib_id = getBibIdForMfhd(current,mfhd_id);
		if (bib_id > 0
				&& isBibActive(current,bib_id)
				&& ! updatedBibs.contains(bib_id)) {
			addBibToUpdateQueue(current, bib_id, DataChangeUpdateType.ITEM_UPDATE);
			updatedBibs.add(bib_id);
		}
	}

	private static boolean isBibActive(Connection current, Integer bib_id) throws SQLException {
		boolean exists = false;
		try ( PreparedStatement bibVoyQStmt = current.prepareStatement( bibVoyQuery ) ){
			bibVoyQStmt.setInt(1, bib_id);
			try ( ResultSet rs = bibVoyQStmt.executeQuery() ){
				while (rs.next())
					exists = rs.getBoolean(2);
			}
		}
		return exists;
	}
	private static int getBibIdForMfhd(Connection current, Integer mfhd_id) throws SQLException {
		Integer bib_id = 0;
		try ( PreparedStatement mfhdVoyQStmt = current.prepareStatement(mfhdVoyQuery) ) {
			mfhdVoyQStmt.setInt(1, mfhd_id);
			try ( ResultSet rs = mfhdVoyQStmt.executeQuery() ){
				while (rs.next())
					bib_id = rs.getInt(1);
			}
		}
		return bib_id;
	}

	private void thoroughIdentifiationOfChanges() throws Exception {

	    this.davService = DavServiceFactory.getDavService( config );
		System.out.println("Comparing to contents of index at: " + config.getSolrUrl() );

		IndexRecordListComparison c = new IndexRecordListComparison(config);

		Set<Integer> bibsToAdd = c.bibsInVoyagerNotIndex();
		System.out.println("Bibs To Add to Solr: "+bibsToAdd.size());
		produceAddFile( bibsToAdd );
		Set<Integer> bibsToDelete = c.bibsInIndexNotVoyager();
		System.out.println("Bibs To Delete from Solr: "+bibsToDelete.size());
		produceDeleteFile( bibsToDelete );

		System.out.println("Bibs To Update:");

		Set<Integer> bibsToUpdate = c.bibsNewerInVoyagerThanIndex();
		System.out.println("\tbibsNewerInVoyagerThanIndex: "+bibsToUpdate.size());

		Set<Integer> markedBibs = c.bibsMarkedAsNeedingReindexingDueToDataChange();
		System.out.println("\tbibsMarkedAsNeedingReindexingDueToDataChange: "+markedBibs.size());

		Map<Integer,Integer> tempMap = c.mfhdsNewerInVoyagerThanIndex();
		System.out.println("\tmfhdsNewerInVoyagerThanIndex: "+tempMap.size());
		Set<Integer> mfhdsToUpdate = new HashSet<>();
		mfhdsToUpdate.addAll(tempMap.values());
		tempMap.clear();

		tempMap = c.itemsNewerInVoyagerThanIndex();
		System.out.println("\titemsNewerInVoyagerThanIndex: "+tempMap.size());
		Set<Integer> itemsToUpdate = new HashSet<>();
		itemsToUpdate.addAll(tempMap.values());
		tempMap.clear();

		tempMap = c.mfhdsInIndexNotVoyager();
		System.out.println("\tmfhdsInIndexNotVoyager: "+tempMap.size());
		mfhdsToUpdate.addAll(tempMap.values());
		tempMap.clear();

		tempMap = c.mfhdsInVoyagerNotIndex();
		System.out.println("\tmfhdsInVoyagerNotIndex: "+tempMap.size());
		mfhdsToUpdate.addAll(tempMap.values());
		tempMap.clear();

		tempMap = c.itemsInIndexNotVoyager();
		System.out.println("\titemsInIndexNotVoyager: "+tempMap.size());
		itemsToUpdate.addAll(tempMap.values());
		tempMap.clear();

		tempMap = c.itemsInVoyagerNotIndex();
		System.out.println("\titemsInVoyagerNotIndex: "+tempMap.size());
		itemsToUpdate.addAll(tempMap.values());
		tempMap.clear();
		
		Map<Integer,ChangedBib> tempCBMap = c.mfhdsAttachedToDifferentBibs();
		System.out.println("\tmfhdsAttachedToDifferentBibs: "+tempCBMap.size());
		for ( IndexRecordListComparison.ChangedBib cb : tempCBMap.values()) {
			mfhdsToUpdate.add(cb.original);
			mfhdsToUpdate.add(cb.changed);
		}
		tempCBMap.clear();

		tempCBMap = c.itemsAttachedToDifferentMfhds();
		System.out.println("\titemsAttachedToDifferentMfhds: "+tempCBMap.size());
		for ( IndexRecordListComparison.ChangedBib cb : tempCBMap.values()) {
			itemsToUpdate.add(cb.original);
			itemsToUpdate.add(cb.changed);
		}
		tempCBMap.clear();

		bibsToUpdate.removeAll(bibsToDelete);
		bibsToUpdate.removeAll(bibsToAdd);
		c.queueBibs( bibsToUpdate, DataChangeUpdateType.BIB_UPDATE );
		mfhdsToUpdate.removeAll(bibsToDelete);
		mfhdsToUpdate.removeAll(bibsToAdd);
		mfhdsToUpdate.removeAll(bibsToUpdate);
		c.queueBibs( mfhdsToUpdate, DataChangeUpdateType.MFHD_UPDATE );
		itemsToUpdate.removeAll(bibsToDelete);
		itemsToUpdate.removeAll(bibsToAdd);
		itemsToUpdate.removeAll(bibsToUpdate);
		itemsToUpdate.removeAll(mfhdsToUpdate);
		c.queueBibs( itemsToUpdate, DataChangeUpdateType.ITEM_UPDATE );
		int totalBibsToUpdateCount = bibsToUpdate.size()+mfhdsToUpdate.size()+itemsToUpdate.size();

		bibsToUpdate.addAll(markedBibs);
		markedBibs.clear();
		bibsToUpdate.removeAll(bibsToDelete);
		bibsToUpdate.removeAll(bibsToAdd);

		System.out.println("Bibs To Update in Solr: "+totalBibsToUpdateCount);		
		produceUpdateFile(bibsToUpdate);
		c.queueBibs( bibsToDelete, DataChangeUpdateType.DELETE );
		c.queueBibs( bibsToAdd, DataChangeUpdateType.ADD );

		c = null; // to allow GC
	
 	}

	private void produceDeleteFile( Set<Integer> bibsToDelete ) throws Exception {

		// Write a file of BIBIDs that are in the Solr index but not voyager
		if ( bibsToDelete != null && bibsToDelete.size() > 0) {
			String deleteReport = bibsToDelete.stream().map(Object::toString)
					.collect(Collectors.joining("\n", "", "\n"));

			String deleteReportFile = 
			        config.getWebdavBaseUrl() + "/" + config.getDailyBibDeletes() + "/"
			        + "bibListForDelete-"+ currentDate + ".txt";			
			try {
				davService.saveFile( deleteReportFile ,
						new ByteArrayInputStream(deleteReport.getBytes(StandardCharsets.UTF_8)));
				System.out.println("Wrote report to " + deleteReportFile);
			} catch (Exception e) {
				throw new Exception("Could not save report of deletes to '" + deleteReportFile + "'" , e);
			}		
		}
		
	}
	
	private void produceAddFile(Set<Integer> bibsToAdd) throws Exception {

		// Write a file of BIBIDs that are in Voyager but not in the Solr index
		if ( bibsToAdd != null && bibsToAdd.size() > 0) {

			String addReport = bibsToAdd.stream().map(Object::toString)
					.collect(Collectors.joining("\n", "", "\n"));
			String addReportFile =
			        config.getWebdavBaseUrl() + "/" + config.getDailyBibAdds() + "/"
			        + "bibListToAdd-"+ currentDate + ".txt";
			try {
				davService.saveFile( addReportFile ,
						new ByteArrayInputStream(addReport.getBytes(StandardCharsets.UTF_8)));
				System.out.println("Wrote report to " + addReportFile);
			} catch (Exception e) {
				throw new Exception("Could not save report of adds to '" + addReportFile + "'" , e);
			}
		}

	}

	private void produceUpdateFile( Set<Integer> bibsToUpdate) throws Exception {

		if (bibsToUpdate != null && bibsToUpdate.size() > 0){

			String updateReport = bibsToUpdate.stream().map(Object::toString)
					.collect(Collectors.joining("\n", "", "\n"));

			String fileName = config.getWebdavBaseUrl() + "/" + config.getDailyBibUpdates() + "/"
			        + "bibListForUpdate-"+ currentDate + ".txt";
			try {			    
				davService.saveFile(fileName,
						new ByteArrayInputStream(updateReport.getBytes(StandardCharsets.UTF_8)));
				System.out.println("Wrote report to " + fileName);
			} catch (Exception e) {
			    throw new Exception("Could not save list of "
			            + "BIB IDs that need update to file '" + fileName + "'",e);   
			}
		}
	}

	public static enum DataChangeUpdateType {
		ADD("Added Record",IndexQueuePriority.DATACHANGE),
		BIB_UPDATE("Bibliographic Record Update",IndexQueuePriority.DATACHANGE),
		MFHD_ADD("Holdings Record Added",IndexQueuePriority.DATACHANGE),
		MFHD_UPDATE("Holdings Record Change",IndexQueuePriority.DATACHANGE),
		MFHD_DELETE("Holdings Record Removed",IndexQueuePriority.DATACHANGE),
		ITEM_ADD("Item Record Added",IndexQueuePriority.DATACHANGE),
		ITEM_UPDATE("Item Record Change",IndexQueuePriority.DATACHANGE),
		ITEM_DELETE("Item Record Removed",IndexQueuePriority.DATACHANGE),
		DELETE("Record Deleted or Suppressed",IndexQueuePriority.DATACHANGE),
		TITLELINK("Title Link Update",IndexQueuePriority.DATACHANGE_SECONDARY),
		
		AGE_IN_SOLR("Age of Record in Solr",IndexQueuePriority.NOT_RECENTLY_UPDATED);

		private String string;
		private IndexQueuePriority priority;

		private DataChangeUpdateType(String name, IndexQueuePriority priority) {
			string = name;
			this.priority = priority;
		}

		public String toString() { return string; }
		public IndexQueuePriority getPriority () { return priority; }
	}
	
}
