<?xml version="1.0" encoding="UTF-8" ?>
<schema name="Cornell Blacklight Index" version="201408">
  <types>
    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldtype name="binary" class="solr.BinaryField"/>
    
    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as strings.
           This includes "string","boolean","sint","slong","sfloat","sdouble","pdate"
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    --> 
    
   <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
    -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>

     <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0" sortMissingLast="true"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>

   <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>

    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         purposes.  The ordering is generated based on the field name 
         and the version of the index, As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the name
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true" />

    
    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="0"/>
        <filter class="solr.KStemFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="textP" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.KStemFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Analyzed Text, no Stemming -->
    <fieldType name="textNoStemC" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="0"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
    </fieldType>
    <fieldType name="textNoStemP" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="textLeftAnchoredP" class="solr.TextField" omitNorms="true">
      <analyzer type="index">
        <!-- prefix value to ensure left-anchored phrase searching -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^" replacement="b𐐩gn " />
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.KStemFilterFactory"/>
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="30"/>
      </analyzer>
      <analyzer type="query">
        <!-- prefix value to ensure left-anchored phrase searching -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^" replacement="b𐐩gn " />
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.KStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="textLeftAnchoredC" class="solr.TextField" omitNorms="true">
      <analyzer type="index">
        <!-- prefix value to ensure left-anchored phrase searching -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^" replacement="b𐐩gn " />
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="0"/>
        <filter class="solr.KStemFilterFactory"/>
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="30"/>
      </analyzer>
      <analyzer type="query">
        <!-- prefix value to ensure left-anchored phrase searching -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^" replacement="b𐐩gn " />
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="0"/>
        <filter class="solr.KStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="textLeftAnchoredBoostC" class="solr.TextField" omitNorms="true">
      <analyzer type="index">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[Cc]++" replacement="cplusplus" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[\-'/]+" replacement=""/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\p{Punct}+" replacement=" "/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.ShingleFilterFactory" outputUnigrams="false" maxShingleSize="30"/>
        <filter class="solr.LimitTokenPositionFilterFactory" maxTokenPosition="1" consumeAllTokens="false" />
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[Cc]++" replacement="cplusplus" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[\-'/]+" replacement=""/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\p{Punct}+" replacement=" "/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+" replacement=" "/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.TrimFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="textLeftAnchoredBoostP" class="solr.TextField" omitNorms="true">
      <analyzer type="index">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[Cc]++" replacement="cplusplus" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[\-'/]+" replacement=" "/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\p{Punct}+" replacement=" "/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.ShingleFilterFactory" outputUnigrams="false" maxShingleSize="30"/>
        <filter class="solr.LimitTokenPositionFilterFactory" maxTokenPosition="1" consumeAllTokens="false" />
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="&amp;" replacement="et" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[Cc]++" replacement="cplusplus" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[\-'/]+" replacement=" "/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\p{Punct}+" replacement=" "/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+" replacement=" "/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.TrimFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="textLeftAnchoredCJK" class="solr.TextField" omitNorms="true">
      <analyzer type="index">
		<!--  remove all spaces  -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[\s\u3000]+" replacement=""/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.CJKWidthFilterFactory"/>
        <filter class="edu.stanford.lucene.analysis.CJKFoldingFilterFactory"/>
        <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>
        <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>
        <filter class="solr.ICUFoldingFilterFactory"/> <!-- NFKC, case folding, diacritics removed -->
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="30"/>
      </analyzer>
      <analyzer type="query">
		<!--  remove all spaces  -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[\s\u3000]+" replacement=""/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.CJKWidthFilterFactory"/>
        <filter class="edu.stanford.lucene.analysis.CJKFoldingFilterFactory"/>
        <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>
        <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>
        <filter class="solr.ICUFoldingFilterFactory"/> <!-- NFKC, case folding, diacritics removed -->
      </analyzer>
    </fieldType>
    <fieldType name="numericLeftAnchored" class="solr.TextField" >
    <analyzer type="index">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="-" replacement=""/>
		<tokenizer class="solr.PatternTokenizerFactory" pattern="[^a-zA-Z\d\.]+"/>
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="20"/>
    </analyzer>
    <analyzer type="query">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="-" replacement=""/>
		<tokenizer class="solr.PatternTokenizerFactory" pattern="[^a-zA-Z\d\.]+"/>
    </analyzer>
    </fieldType>
    
    
    <!--  CJK field type for Chinese, Japanese & Korean text is care of Naomi Dushay and her work at Stanford -->
    <fieldtype name="textCJK" class="solr.TextField" positionIncrementGap="10000" autoGeneratePhraseQueries="false">
     <analyzer>
        <!-- remove spaces among hangul and han chars if there is at least one hangul char -->
        <!-- a korean char guaranteed at the start of the pattern: pattern="(\p{Hangul}\p{Han}*)\s+(?=[\p{Hangul}\p{Han}])" -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([\p{InHangul_Jamo}\p{InHangul_Compatibility_Jamo}\p{InHangul_Syllables}][\p{InBopomofo}\p{InBopomofo_Extended}\p{InCJK_Compatibility}\p{InCJK_Compatibility_Forms}\p{InCJK_Compatibility_Ideographs}\p{InCJK_Compatibility_Ideographs_Supplement}\p{InCJK_Radicals_Supplement}\p{InCJK_Symbols_And_Punctuation}\p{InCJK_Unified_Ideographs}\p{InCJK_Unified_Ideographs_Extension_A}\p{InCJK_Unified_Ideographs_Extension_B}\p{InKangxi_Radicals}\p{InHalfwidth_And_Fullwidth_Forms}\p{InIdeographic_Description_Characters}]*)\s+(?=[\p{InHangul_Jamo}\p{InHangul_Compatibility_Jamo}\p{InHangul_Syllables}\p{InBopomofo}\p{InBopomofo_Extended}\p{InCJK_Compatibility}\p{InCJK_Compatibility_Forms}\p{InCJK_Compatibility_Ideographs}\p{InCJK_Compatibility_Ideographs_Supplement}\p{InCJK_Radicals_Supplement}\p{InCJK_Symbols_And_Punctuation}\p{InCJK_Unified_Ideographs}\p{InCJK_Unified_Ideographs_Extension_A}\p{InCJK_Unified_Ideographs_Extension_B}\p{InKangxi_Radicals}\p{InHalfwidth_And_Fullwidth_Forms}\p{InIdeographic_Description_Characters}])" replacement="$1"/>
        <!-- a korean char guaranteed at the end of the pattern: pattern="([\p{Hangul}\p{Han}])\s+(?=[\p{Han}\s]*\p{Hangul})" -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([\p{InHangul_Jamo}\p{InHangul_Compatibility_Jamo}\p{InHangul_Syllables}\p{InBopomofo}\p{InBopomofo_Extended}\p{InCJK_Compatibility}\p{InCJK_Compatibility_Forms}\p{InCJK_Compatibility_Ideographs}\p{InCJK_Compatibility_Ideographs_Supplement}\p{InCJK_Radicals_Supplement}\p{InCJK_Symbols_And_Punctuation}\p{InCJK_Unified_Ideographs}\p{InCJK_Unified_Ideographs_Extension_A}\p{InCJK_Unified_Ideographs_Extension_B}\p{InKangxi_Radicals}\p{InHalfwidth_And_Fullwidth_Forms}\p{InIdeographic_Description_Characters}])\s+(?=[\p{InBopomofo}\p{InBopomofo_Extended}\p{InCJK_Compatibility}\p{InCJK_Compatibility_Forms}\p{InCJK_Compatibility_Ideographs}\p{InCJK_Compatibility_Ideographs_Supplement}\p{InCJK_Radicals_Supplement}\p{InCJK_Symbols_And_Punctuation}\p{InCJK_Unified_Ideographs}\p{InCJK_Unified_Ideographs_Extension_A}\p{InCJK_Unified_Ideographs_Extension_B}\p{InKangxi_Radicals}\p{InHalfwidth_And_Fullwidth_Forms}\p{InIdeographic_Description_Characters}\s]*[\p{InHangul_Jamo}\p{InHangul_Compatibility_Jamo}\p{InHangul_Syllables}])" replacement="$1"/>
        <tokenizer class="solr.ICUTokenizerFactory" />
        <filter class="solr.CJKWidthFilterFactory"/>
        <filter class="edu.stanford.lucene.analysis.CJKFoldingFilterFactory"/> <!-- This filter includes modifications from Princeton -->
        <filter class="solr.ICUTransformFilterFactory" id="Traditional-Simplified"/>
        <filter class="solr.ICUTransformFilterFactory" id="Katakana-Hiragana"/>
        <filter class="solr.ICUFoldingFilterFactory"/> <!-- NFKC, case folding, diacritics removed -->
        <filter class="solr.CJKBigramFilterFactory" han="true" hiragana="true" katakana="true" hangul="true" outputUnigrams="true" />
      </analyzer>
    </fieldtype>

    <fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
<!--         <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/> -->
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="[\p{Punct}¿¡「」]" replacement="" replace="all"/>
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.TrimFilterFactory" />
      </analyzer>
    </fieldType>
    
    
    <!-- attempt to do exact matches taking into account Unicode -->
      <fieldType name="exact" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.ICUFoldingFilterFactory"/>        
        <filter class="solr.TrimFilterFactory" />
      </analyzer>
    </fieldType>

	<!-- While the primary target of this analysis is LC Call Numbers, 
	other call numbers such as "1-1-1" and "Thesis 3" should be supported. -->
    <fieldType name="callNumberNormalized" class="solr.TextField" omitNorms="true">
      <analyzer>
        <!-- replace any periods with spaces if they don't precede number -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\.(?!\d)" replacement=" " />
        <!-- if a number follows directly after a letter, insert a space between them -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-zA-Z])(\d)" replacement="$1 $2" />
        <!-- if a letter follows directly after a number, insert a space between them -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d)([a-zA-Z])" replacement="$1 $2" />
        <!-- replace any leading whitespace with "lccncode." to ensure left-anchored phrase searching -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^[^a-zA-Z\d]*([a-zA-Z\d])" replacement="lccncode.$1" />
        <!-- treat any sequences of characters that are not alphanumeric + periods as breaks between tokens -->
        <tokenizer class="solr.PatternTokenizerFactory" pattern="[^a-zA-Z\d\.]+"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>
    <fieldType name="callNumberSort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- replace any periods with spaces if they precede a letter -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\.([^\d])" replacement=" $1" />
        <!-- if a number follows directly after a letter, insert a space between them -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-zA-Z])(\d)" replacement="$1 $2" />
        <!-- if a letter follows directly after a number, insert a space between them -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d)([a-zA-Z])" replacement="$1 $2" />

		<!-- strip all non-alphanumeric characters sequences down to single spaces -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="[^a-zA-Z\d\.]+" replacement=" "/>

        <!-- zero-pad numbers both before and after the decimal -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\." replacement="a" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\b(\d+)\b" replacement="$1a0" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\b(\d+)a(\d+)\b" replacement="00000$1a$200000" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="0*(\d{6})a(\d{6})0*" replacement="$1.$2" />

	    <!-- strip leading spaces -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^\s*" replacement="" />

        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="filing" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer type="index">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="edu.cornell.library.integration.utilities.FilingFilterFactory" />
      </analyzer>
    </fieldType>

  </types>

  
  <fields>   
    <!-- NOTE: this is not a full list of fields in the index; dynamic fields are also used -->
    <field name="id" type="string" indexed="true" stored="true" required="true" />
    <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
    <!-- required for updateLog and NRT indexing -->
    <field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>

    <field name="notes" type="text" indexed="false" stored="true" multiValued="true"/>
	<!-- fields used for back-end linking of license data for databases -->
    <field name="dbcode" type="string" indexed="false" stored="true" multiValued="true"/>
    <field name="providercode" type="string" indexed="false" stored="true" multiValued="true"/>

    <!-- these display fields are NOT multi-valued -->
    <field name="marc_display" type="string" indexed="false" stored="true" multiValued="false"/>
    <field name="title_display" type="string" indexed="false" stored="true" multiValued="false"/>
    <field name="title_vern_display" type="string" indexed="false" stored="true" multiValued="false"/>
    <field name="fulltitle_display" type="string" indexed="false" stored="true" multiValued="false"/>
    <field name="fulltitle_vern_display" type="string" indexed="false" stored="true" multiValued="false"/>
    <field name="subtitle_display" type="string" indexed="false" stored="true" multiValued="false"/>
    <field name="subtitle_vern_display" type="string" indexed="false" stored="true" multiValued="false"/>
    <field name="author_display" type="string" indexed="false" stored="true" multiValued="false"/>
    <field name="author_vern_display" type="string" indexed="false" stored="true" multiValued="false"/>

    <!-- these fields are also used for display, so they must be stored -->
    <!-- these display fields are now being used for search -->
    <field name="isbn_t" type="text" indexed="true" stored="true" multiValued="true"/>
    <field name="language_facet" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="subject_topic_facet" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="subject_era_facet" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="subject_geo_facet" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="subject_content_facet" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="author_facet" type="string" indexed="true" stored="true" multiValued="true" />
    <!-- pub_date is used for facet and display so it must be indexed and stored -->
    <field name="pub_date" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="pub_date_facet" type="tint" indexed="true" stored="true" multiValued="false"/>
    <field name="pub_date_sort" type="tint" indexed="true" stored="true" multiValued="false"/>
    <field name="acquired" type="tint" indexed="true" stored="true" multiValued="false"/>
    <field name="acquired_month" type="string" indexed="true" stored="true" multiValued="false"/>
    <field name="new_shelf" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="title_exact" type="exact" indexed="true" stored="false" multiValued="true" />
  
    <!-- call number uses custom type -->
    <field name="lc_callnum_full" type="callNumberNormalized" indexed="true" stored="false" multiValued="true" />
    <field name="callnum_sort" type="callNumberSort" indexed="true" stored="true" multiValued="false" />

    <!-- fields used for facet, display, and results filtering, so they must be stored and indexed -->
    <field name="format" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="collection" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="type" type="string" indexed="true" stored="true" multiValued="false" required="true"/>
    <field name="source" type="string" indexed="true" stored="true" multiValued="false" required="true"/>
    <field name="online" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="sixfivethree" type="string" indexed="true" stored="true" multiValued="true"/>
    <!-- format_main_facet is used for type-aggregated relevance sorting, so it must be single valued-->
    <field name="format_main_facet" type="string" indexed="true" stored="true" multiValued="false"/>

    <dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>
    <dynamicField name="*_s"  type="string"  indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>
    <dynamicField name="*_t"  type="text"    indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_tP"  type="textP"    indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_left_boost_tC"  type="textLeftAnchoredBoostC" indexed="true" stored="false" multiValued="true"/>
    <dynamicField name="*_left_boost_tP"  type="textLeftAnchoredBoostP" indexed="true" stored="false" multiValued="true"/>
    <dynamicField name="*_t_cjk"  type="textCJK"    indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
    <dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>
    <dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>
    <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>
    <dynamicField name="random*" type="random" />
    <dynamicField name="*_filing" type="string" indexed="true" stored="true" multiValued="true"/>

    <dynamicField name="*_facet" type="string" indexed="true" stored="true" multiValued="true" />
    <dynamicField name="*_data" type="string" indexed="true" stored="true" multiValued="true" />
    <dynamicField name="*_cts" type="string" indexed="false" stored="true" multiValued="true" />
    <dynamicField name="*_piped" type="string" indexed="false" stored="true" multiValued="true" />
    <dynamicField name="*_json" type="string" indexed="false" stored="true" multiValued="true" />
    <dynamicField name="*_display" type="string" indexed="false" stored="true" multiValued="true" />
    <dynamicField name="*_sort" type="filing" indexed="true" stored="false" multiValued="false"/>
	<dynamicField name="*_browse" type="filing" indexed="true" stored="false"  multiValued="true"/>
    <dynamicField name="*_unstemC" type="textNoStemC" indexed="true" stored="false" multiValued="true" />
    <dynamicField name="*_unstemP" type="textNoStemP" indexed="true" stored="false" multiValued="true" />
    <dynamicField name="*_startsC" type="textLeftAnchoredC" indexed="true" stored="false" multiValued="true" />
    <dynamicField name="*_startsCJK" type="textLeftAnchoredCJK" indexed="true" stored="false" multiValued="true" />
    <dynamicField name="*_startsP" type="textLeftAnchoredP" indexed="true" stored="false" multiValued="true" />
    <dynamicField name="*_startsNum" type="numericLeftAnchored" indexed="true" stored="false" multiValued="true" />
    <dynamicField name="*spell" type="textSpell" indexed="true" stored="false" multiValued="true"/>
  </fields>

  <uniqueKey>id</uniqueKey>
  <solrQueryParser defaultOperator="AND"/>

  <!-- Copy Fields -->

  <copyField source="*_t" dest="*_tP"/>
  <copyField source="*_t" dest="*_unstemC"/>
  <copyField source="*_t" dest="*_unstemP"/>
  <copyField source="*_t" dest="*_startsC"/>
  <copyField source="*_t" dest="*_startsP"/>
  <copyField source="*_t_cjk" dest="*_startsCJK"/>
  <copyField source="issn_t" dest="issn_startsNum"/>
  <copyField source="isbn_t" dest="isbn_startsNum"/>
  <copyField source="pub_date_t" dest="pub_date_startsNum"/>
  <copyField source="eightninenine_t" dest="eightninenine_startsNum"/>
  <copyField source="barcode_t" dest="barcode_startsNum"/>
  <copyField source="barcode_addl_t" dest="barcode_addl_startsNum"/>
  <copyField source="id_t" dest="id_startsNum"/>
  <copyField source="id" dest="id_startsNum"/>
  <copyField source="donor_s" dest="donor_startsC"/>
  <copyField source="*_filing" dest="*_browse"/>
  <copyField source="donor_display" dest="donor_t"/>

  <!-- spellcheck fields -->
  <!-- default spell check;  should match fields for default request handler -->
  <!-- it won't work with a copy of a copy field -->
  <copyField source="*_t" dest="spell"/>
  <!-- title spell check;  should match fields for title request handler -->
  <copyField source="title_t" dest="title_spell"/>
  <copyField source="title_t" dest="title_left_boost_tC"/>
  <copyField source="title_t" dest="title_left_boost_tP"/>
  <copyField source="title_t" dest="title_exact"/>
  <copyField source="subtitle_t" dest="title_spell"/>
  <copyField source="addl_titles_t" dest="title_spell"/>
  <copyField source="title_added_entry_t" dest="title_spell"/>
  <copyField source="title_series_t" dest="title_spell"/>
  <!-- author spell check; should match fields for author request handler -->
  <copyField source="author_t" dest="author_spell"/>
  <copyField source="author_addl_t" dest="author_spell"/>
  <!-- subject spell check; should match fields for subject request handler -->
  <copyField source="subject_topic_facet" dest="subject_spell"/>
  <copyField source="subject_t" dest="subject_spell"/>
  <copyField source="subject_addl_t" dest="subject_spell"/>  
  
  <!-- OpenSearch query field should match request handler search fields -->
  <copyField source="fulltitle_display" dest="opensearch_display"/>
  <copyField source="fulltitle_vern_display" dest="opensearch_display"/>
  <copyField source="addl_titles_t" dest="opensearch_display"/>
  <copyField source="title_added_entry_t" dest="opensearch_display"/>
  <copyField source="title_series_t" dest="opensearch_display"/>
  <copyField source="author_t" dest="opensearch_display"/>
  <copyField source="author_addl_t" dest="opensearch_display"/>
  <copyField source="subject_t" dest="opensearch_display"/>
  <copyField source="subject_addl_t" dest="opensearch_display"/>  

</schema>
