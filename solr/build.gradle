/*
Build Script to put together a solr deploy. 
This will:
 download a version of the Solr binaries,
 unpack those,
 add any additional libraries to that
 copy that to a deploy directory on your jetty or tomcat 
 copy a template solr home directory to a specified location

 The tomcat or jetty server needs to have the solr home property
 specified by hand.
*/
apply plugin: "java"

ext {
    solrVersion = "3.6.1"
    apacheArchive = "http://archive.apache.org/dist/lucene/solr"

    solrName = "apache-solr-$solrVersion"
    solrDownloadedFile = solrName + '.tgz'
    solrURL = "$apacheArchive/$solrVersion/$solrDownloadedFile"

    downloadDir = file("$buildDir/downloads")
    solrUnTar = file("$buildDir/$solrName")
    explodedSolrWarDir = file("$buildDir/solrWar")
}

dependencies {
   //compile project(':rdfToSolr')
   //compile 'org.apache.jena:jena-arq:2.9.3'  

   //Folling jars are for ICUFoldingFilter support
   compile fileTree(dir: solrUnTar, include: '**/apache-solr-analysis-extras-*.jar')
   compile fileTree(dir: solrUnTar, include: '**/icu4j-*.jar')
   compile fileTree(dir: solrUnTar, include: '**/lucene-icu-*.jar')
   compile fileTree(dir: solrUnTar, include: '**/lucene-smartcn-*.jar')
   compile fileTree(dir: solrUnTar, include: '**/lucene-stempel-*.jar')

   compile fileTree(dir: explodedSolrWarDir, include: '**/*.jar')
}

task list(dependsOn: configurations.compile) << {
    println "explodedSolrWarDir: $explodedSolrWarDir"
    println "classpath = ${configurations.compile.collect {File file -> file.name}}"
}

task solrDownload() << {  
     downloadDir.mkdirs()      
     solrTar = file( "$downloadDir/$solrDownloadedFile" )
     if (!solrTar.isFile()) {
       exec{
          commandLine  'wget',  "$solrURL"
          workingDir downloadDir
       }
     }

     //un-tar solr download
     copy{
          from tarTree( solrTar )
          into buildDir
     }

     //unpack the war
     explodedSolrWarDir.mkdirs() 
     copy {
          from zipTree( "$solrUnTar/dist/apache-solr-$solrVersion" + '.war')
          into explodedSolrWarDir
     }
} 

jar {
    dependsOn configurations.compile, solrDownload
    //make a fat jar
    from { 
         configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } 
    }
}
